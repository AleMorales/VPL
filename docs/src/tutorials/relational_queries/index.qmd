---
author: "Alejandro Morales"
format: 
    html:
        code-fold: true
        code-summary: "Show the code"
    commonmark:
        variant: -raw_html
execute: 
  cache: true
---

# Relational queries

In this example we illustrate how to test relationships among nodes inside queries.
Relational queries allow to establish relationships between nodes in the graph, 
which generally requires a intimiate knowledge of the graph. For this reason,
relational queries are inheretly complex as graphs can become complex and there
may be solutions that do not require relational queries in many instances.
Nevertheless, they are integral part of VPL and can sometimes be useful. As they
can be hard to grasp, this tutorial will illustrate with a relatively simple
graph a series of relational queries with increasing complexity with the aim
that users will get a better understanding of relational queries. For this purpose, 
an abstract graph with several branching levels will be used, so that we can focus
on the relations among the nodes without being distracted by case-specific details.

The graph will be composed of two types of nodes: the inner nodes (`A` and `C`) and the 
leaf nodes (`B`). Each leaf node will be identified uniquely with an index and
the objective is to write queries that can identify a specific subset of the leaf
nodes, without using the data stored in the nodes themselves. That is, the queries
should select the right nodes based on their relationships to the rest of nodes
in the graph. Note that `C` nodes contain a single value that may be positive or negative, 
whereas `A` nodes contain no data.

<!-- TODO: Add some reminder related to struct re-definition...maybe we use modules from the beginning as good practice? -->

As usual, we start with defining the types of nodes in the graph

```{julia}
#| code-fold: false
using VPL

struct A <: Node end

struct C <: Node
    val::Float64
end

struct B <: Node
    ID::Int
end
```

We generate the graph directly, rather than with rewriting rules. The graph has
a motif that is repeated three times (with a small variation), so we can create
the graph in a piecewise manner. Note how we can use the function `sum` to add
nodes to the graph (i.e. `sum(A() for i in 1:3)` is equivalent to `A() + A() + A()`)

```{julia}
#| code-fold: false
motif(n, i = 0) = A() + (C(45.0) + A() + (C(45.0) +  A() + B(i + 1), 
                                           C(-45.0) + A() + B(i + 2), 
                                                       A() + B(i + 3)), 
                         C(- 45.0) + sum(A() for i in 1:n) + B(i + 4))
axiom =  motif(3, 0) + motif(2, 4) + motif(1, 8) + A() + A() + B(13)
graph = Graph(axiom);
```

<!-- TODO: Add comments to the graph being created in the relational_queries example -->

If we draw this graph, by default we can only see the types of graph and the
internal node identification number automatically generated by VPL. However, we
can define a method for the function `get_id()` in order to customize how
each type of node is represented in the graph. The function `get_id()` takes as
input the node identification number and the data stored in the node. Thus, we 
can specialize on the type of the second argument. This function should always
return a string, which is then drawn inside the boxes representing nodes in the
graph.

```{julia}
#| code-fold: false
VPL.get_id(node_id, data::A) = "A"
VPL.get_id(node_id, data::C) = "C"*ifelse(sign(data.val) > 0.0, "+", "-")
VPL.get_id(node_id, data::B) = "B("*string(data.ID)*")"
```

And, as usual, the `draw()` function will render the graph but now it will use the methods defined in the above as labels per node.

```{julia}
#| code-fold: false
draw(graph)
```

The goal of this exercise is then to write queries that retrieve specific `B` nodes (without using the data stored in the node in the query, that is, we have to identify nodes based on their topological connections to other nodes).

## All nodes of type `B`

First, we create the query object. In this case, there is no special condition as
we want to retrieve all the nodes of type `B`

```{julia}
#| code-fold: false
Q1 = Query(B)
```

Applying the query to the graph returns an array with all the `B` nodes

```{julia}
#| code-fold: false
A1 = apply(graph, Q1)
```


For the remainder of this tutorial, the code will be hidden by default to allow users to try on their own.


## Node containing value 13

Since the `B` node 13 is the leaf node of the main branch of the graph (e.g. this could be the apical meristem of the main stem of a plant), there
are no rotations between the root node of the graph and this node. Therefore,
the only condition require to single out this node is that it has no ancestor
node of type `C`. 

Checking whether a node has an ancestor that meets a certain
condition can be achieved with the function `hasAncestor()`. Similarly to the 
condition of the `Query` object, the `hasAncestor()` function also has a condition,
in this case applied to the parent node of the node being tested, and moving
upwards in the graph recursively (until reaching the root node). Note that, in
order to access the object stored inside the node, we need to use the `data()`
function, and then we can test if that object is of type `C`. The `B` node 13
is the only node for which `hasAncestor()` should return `false`:

<!-- FIXME: Describe better what the hasAncestor function takes and returns -->

```{julia}
function Q2_fun(n)
    check, steps = hasAncestor(n, x -> data(x) isa C)
    !check
end
```

As before, we just need to apply the `Query` object to the graph:

```{julia}
Q2 = Query(B, Q2_fun)
A2 = apply(graph, Q2)
```

## Nodes containing values 1, 2 and 3  

These three nodes belong to one of the branch motifs repeated through the graph. Thus,
we need to identify the specific motif they belong to and chose all the `B` nodes
inside that motif. The motif is defined by an `A` node that has a `C` child with
a negative `val` and parent node `C` with positive `val`. This `A` node 
should then be 2 nodes away from the root node to separate it from upper repetitions
of the motif.
Therefore, we need to test for two conditions, first find those nodes inside a 
branch motif, then retrieve the root of the branch motif (i.e., the `A` node 
described in the above) and then check the distance of that node from the root:

```{julia}
function branch_motif(p)
    data(p) isa A && 
    hasDescendent(p, x -> data(x) isa C && data(x).val < 0.0) &&
    hasAncestor(p, x -> data(x) isa C && data(x).val > 0.0)[1]
end

function Q3_fun(n, nsteps)
    # Condition 1
    check, steps = hasAncestor(n, branch_motif)
    !check && return false
    # Condition 2
    p = parent(n, steps)
    check, steps = hasAncestor(p, isRoot)
    steps != nsteps && return false
    return true
end
```

And applying the query to the object results in the required nodes:

```{julia}
Q3 = Query(B, n -> Q3_fun(n, 2))
A3 = apply(graph, Q3)
```

## Node containing value 4   

The node `B` with value 4 can be singled-out because there is no branching point
between the root node and this node. This means that no ancestor node should have
more than one children node except the root node. Remember that `hasAncestor()`
returns two values, but we are only interested in the first value. You do not need to 
assign the returned object from a Julia function, you can just index directly the element
to be selected from the returned tuple:

```{julia}
function Q4_fun(n)
    !hasAncestor(n, x -> !isRoot(x) && length(children(x)) > 1)[1]
end
```

And applying the query to the object results in the required node:

```{julia}
Q4 = Query(B, Q4_fun)
A4 = apply(graph, Q4)
```

## Node containing value 3  

This node is the only `B` node that is four steps from the root node, which we can
retrieve from the second argument returned by `hasAncestor()`:

```{julia}
function Q5_fun(n)
    check, steps = hasAncestor(n, isRoot)
    steps == 4
end

Q5 = Query(B, Q5_fun)
A5 = apply(graph, Q5)
```

## Node containing value 7  

Node `B` 7 belongs to the second lateral branch motif and the second parent
node is of type `A`. Note that we can reuse the `Q3_fun` from before in the 
condition required for this node:

```{julia}
function Q6_fun(n, nA)
    check = Q3_fun(n, nA)
    !check && return false
    p2 = parent(n,2)
    data(p2) isa A
end

Q6 = Query(B, n -> Q6_fun(n, 3))
A6 = apply(graph, Q6)
```

## Nodes containing values 11 and 13  

The `B` nodes 11 and 13 actually have different relationships to the rest of the graph,
so we just need to define two different condition functions and combine them.
The condition for the `B` node 11 is similar to the `B` node 7, whereas the condition
for node 13 was already constructed before, so we just need to combined them with an
OR operator:

```{julia}
Q7 = Query(B, n -> Q6_fun(n, 4) || Q2_fun(n))
A7 = apply(graph, Q7)
```


## Nodes containing values 1, 5 and 9  

These nodes play the same role in the three lateral branch motifs. They are the
only `B` nodes preceded by the sequence A C+ A. We just need to check the
sequence og types of objects for the the first three parents of each `B` node:

```{julia}
function Q8_fun(n)
    p1 = parent(n)
    p2 = parent(n, 2)
    p3 = parent(n, 3)
    data(p1) isa A && data(p2) isa C && data(p2).val > 0.0 && data(p3) isa A
end

Q8 = Query(B, Q8_fun)
A8 = apply(graph, Q8)
```

## Nodes contaning values 2, 6 and 10  

This exercise is similar to the previous one, but the C node has a negative
`val`. The problem is that node 12 would also match the pattern A C- A. We
can differentiate between this node and the rest by checking for a fourth 
ancestor node of class `C`:

```{julia}
function Q9_fun(n)
    p1 = parent(n)
    p2 = parent(n, 2)
    p3 = parent(n, 3)
    p4 = parent(n, 4)
    data(p1) isa A && data(p2) isa C && data(p2).val < 0.0 && 
       data(p3) isa A && data(p4) isa C
end

Q9 = Query(B, Q9_fun)
A9 = apply(graph, Q9)
```

## Nodes containg values 6, 7 and 8  

We already came up with a condition to extract node 7. We can also modify the previous
condition so that it only node 6.  Node 8 can be identified by checking for the third 
parent node being of type `C` and being 5 nodes from the root of the graph.

As always, we can reusing previous conditions since they are just regular Julia functions:

```{julia}
function Q10_fun(n)
    Q6_fun(n, 3) && return true # Check node 7
    Q9_fun(n) && hasAncestor(n, isRoot)[2] == 6 && return true # Check node 6
    hasAncestor(n, isRoot)[2] == 5 && data(parent(n, 3)) isa C && return true # Check node 8 (and not 4!)
end

Q10 = Query(B, Q10_fun)
A10 = apply(graph, Q10)
```

## Nodes containig values 3, 7, 11 and 12  

We already have conditions to select nodes 3, 7 and 11 so we just need a new condition
for node 12 (similar to the condition for 8).

```{julia}
function Q11_fun(n)
    Q5_fun(n) && return true # 3
    Q6_fun(n, 3) && return true # 7
    Q6_fun(n, 4) && return true # 11
    hasAncestor(n, isRoot)[2] == 5 && data(parent(n, 2)) isa C && 
        data(parent(n, 4)) isa A && return true # 12
end

Q11 = Query(B, Q11_fun)
A11 = apply(graph, Q11)
```

## Nodes containing values 7 and 12 

We just need to combine the conditions for the nodes 7 and 12

```{julia}
function Q12_fun(n)
    Q6_fun(n, 3) && return true # 7
    hasAncestor(n, isRoot)[2] == 5 && data(parent(n, 2)) isa C && 
        data(parent(n, 4)) isa A && return true # 12
end

Q12 = Query(B, Q12_fun)
A12 = apply(graph, Q12)
```
