### This file contains public API ###


# Make sure the turtle has this orientation, to be compatible with Makie
# Up   -> X axis
# Arm  -> Y axis
# Head -> Z axis

Base.@kwdef struct TCoord{FT}
    head::Vec{FT} = Z(FT)
    up::Vec{FT}   = X(FT)
    arm::Vec{FT}  = Y(FT)
    pos::Vec{FT}  = Vec{FT}(0,0,0)
end


mutable struct MTurtle{FT} <: Turtle
    coords::TCoord{FT}
    geoms::Mesh{Vec{FT}}
    nvertices::Vector{Int}
    ntriangles::Vector{Int}
end


"""
    MTurtle()

Create a meshing turtle that can convert a `Graph` into a 3D mesh using 
turtle operators, geometry primitives and methods of `feedgeom!()`. By default, 
the meshing turtle will generate geometry primitives with double floating 
precision (`Float64`) but it is possible to generate a version with lower 
precision as in `MTurtle(Float32)`.
"""
function MTurtle(::Type{FT} = Float64) where FT 
    MTurtle{FT}(TCoord{FT}(), Mesh(FT), Int[], Int[])
end

# Update coordinate system associated to a turtle
function update!(turtle::MTurtle; to, head, up, arm)
    turtle.coords = TCoord(head = head, up = up, arm = arm, pos = to)
    return nothing
end

# Access fields without having to know the internal structure

"""
    head(turtle)

Extract the direction vector (a `Vec` object) of the head of the turtle.
"""
function head(turtle::MTurtle)  
    turtle.coords.head
end

"""
    up(turtle)

Extract the direction vector (a `Vec` object) of the back of the turtle.
"""
function up(turtle::MTurtle)
    turtle.coords.up
end

"""
    arm(turtle)

Extract the direction vector (a `Vec` object) of the arm of the turtle.
"""
function arm(turtle::MTurtle)
    turtle.coords.arm
end

"""
    pos(turtle)

Extract the current position of the turtle (a `Vec` object).
"""
function pos(turtle::MTurtle)
    turtle.coords.pos
end

"""
    geoms(turtle)

Extract the 3D mesh generated by the turtle (a `Mesh` object).
"""
function geoms(turtle::MTurtle) 
    turtle.geoms
end

"""
    nvertices(turtle)
    
Extract the number of vertices in the mesh associated to each geometry 
primitive that were fed to the turtle.
"""
function nvertices(turtle::MTurtle) 
    turtle.nvertices
end

"""
    ntriangles(turtle)
    
Extract the number of triangles in the mesh associated to each geometry 
primitive that were fed to the turtle.
"""
function ntriangles(turtle::MTurtle) 
    turtle.ntriangles
end